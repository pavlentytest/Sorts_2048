package com.company;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

public class Main {

    public static void do123() {
        do123();
    }

    public static void main(String[] args) {
        do123();

     /*   int[] a = {5,6,7,1,9};
        Arrays.sort(a);

        System.out.println(Arrays.toString(a));

        ArrayList<Integer> b = new ArrayList<>();
        Collections.addAll(b,6,5,4,-5,8);
        Collections.sort(b);
        for(Integer i: b) {
            System.out.print(i + " ");
        }
*/
        // sort() - простые типы - Quick sort (Быстрая сортировка)
        // объекты - модификац. Merge sort (Сортировка слиянием) - Tim sort

        // http://neerc.ifmo.ru/wiki/index.php?title=%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC%D1%8B_%D0%B8_%D1%81%D1%82%D1%80%D1%83%D0%BA%D1%82%D1%83%D1%80%D1%8B_%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85#.D0.A1.D0.BE.D1.80.D1.82.D0.B8.D1.80.D0.BE.D0.B2.D0.BA.D0.B8

        // 5 сортировок
        // Сортировка пузырек (Bubble sort)
/*
        4 9 7 6 2 3

        4  4  4  2
        9  9  9  4
        7  7  2  9
        6  2  7  7
        2  6  6  6
        3  3  3  3

        // for + for
        */
/*
        Быстрая сортировка (Quick sort)
        1) Выбираем из исходного массива некий опорный - a[i]
        2) Запускается процедура деления массива
              все значения < опорного (влево)
              все знанчения > опорного (вправо)
        3) Для обоих подмножеств левого и правого запускается рекурсия
          (до тех пор пока элементов > 2)

          Сложность алгортима O (nlogn)

*/
/*
    Сортировка вставками (Insertion sort)
    1) Делим исходный массив на отсортированный и неотсорт-ый
       Вначале длина отсортир-ой части = 1
       Потом итерируем массив и расширияем отсортированную часть - одним
       элементом с каждой новой итерацией
       Делается путем сдвига всех элементов вправо, пока не встретится элемент,
       который не нужно двигать:

       3 5 7 8 4 2 1 9 6
       3 5 7 _ 8 2 1 9 6
       3 5 _ 7 8 2 1 9 6
       3 _ 5 7 8 2 1 9 6
       3 4 5 7 8 2 1 9 6

       Сложнось O(n^2)


 */

/*
Сортировка выбором
1) Тоже разделяем исходный массив на сортированный и неотсорт.
 3 5 1 2 4
 1 5 3 2 4
 1 2 3 5 4
 1 2 3 4 5

 Сложность - O(n^2)


* */
/*
Сортировка слиянием (Merge sort)
   5 6 7 8 -6 3 990 4 1 7 3

   5 6    7 8   -6 3   990 4   1 7      3

   5 6    7 8    -6 3     4 990     1 7    3

   5 6 7 8       -6 3 4 990         1 3 7

     -6 3 4 5 6 7 8 990          1 3 7

     Сложность O(nlogn)




 */








    }
}
